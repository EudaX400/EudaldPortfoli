---
import MenuMobileIcon from "../../public/Icons/MenuMobileIcon.astro";
import CloseIcon from "../../public/Icons/CloseIcon.astro";
import Sun from "../../public/Icons/Sun.astro";
import Moon from "../../public/Icons/Moon.astro";
import System from "../../public/Icons/System.astro";

import { getLangFromUrl, useTranslations, useTranslatedPath } from '../i18n/utils';
import { getRelativeLocaleUrl } from 'astro:i18n';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

function getLocalizedAnchorUrl(anchor:string) {
  return `${getRelativeLocaleUrl(lang, '')}${anchor}`;
}

import { languages } from "../i18n/ui";

const translatePath = useTranslatedPath(lang);
---

<div class="relative">
  <div id="header-toggle" class="relative"><MenuMobileIcon/></div>
  <section
    id="header-menu"
    class="absolute right-1/2 w-auto h-auto hidden bg-gray-950 border border-green-700"
  >
    <div id="close-header" class="flex justify-end p-2"><CloseIcon /></div>


    <div class="flex flex-row justify-between items-center p-4 bg-green-700">
      <Sun id="light-mode-mobile" class="size-5 transition-all" />
      <div class="w-0.5 h-4 mx-4 bg-white"></div>
      <Moon id="dark-mode-mobile" class="size-5 transition-all" />
      <div class="w-0.5 h-4 mx-4 bg-white"></div>
      <System id="system-mode-mobile" class="size-5 transition-all" />
    </div>


    <div class="flex flex-col text-white">
      <a href={getLocalizedAnchorUrl('#experience')} class="p-2 border-b border-green-700">{t('header.experience')}</a
      >
      <a href={getLocalizedAnchorUrl('#projects')} class="p-2 border-b border-green-700">{t('header.projects')}</a>
      <a href={getLocalizedAnchorUrl('#skills')} class="p-2 border-b border-green-700">{t('header.skills')}</a>
      <a href={getRelativeLocaleUrl(lang,'about')} class="p-2 border-b border-green-700">{t('header.about')}</a>
      <a href={getRelativeLocaleUrl(lang,'contact')} class="p-2 border-b border-green-700">{t('header.contact')}</a>
    </div>


    <div class="flex items-center p-4 bg-green-700">
      <ul class="flex flex-row justify-between items-center">
        {
          Object.entries(languages).map(([languageCode]) => (
            <li class="lang-menu-option">
              <a
                href={translatePath("/", languageCode)}
                class={`language-link ${languageCode === lang ? 'font-bold' : ''}`}
              >
                {languageCode}
              </a>
            </li>
            <div class={`w-0.5 h-4 mx-4 bg-white ${languageCode === 'en' ? 'hidden' : ''}`}></div>
          ))
        }
      </ul>
    </div>
    
  </section>
</div>

<script is:inline type="module">
  import {
    handleThemeChange,
    getThemePreference,
  } from "../utils/themeManager.js";


  const initializeMobileMenu = () => {
    const headerToggle = document.getElementById("header-toggle");
    const closeHeader = document.getElementById("close-header");
    const headerMenu = document.getElementById("header-menu");

    const lightModeBtn = document.getElementById("light-mode-mobile");
    const darkModeBtn = document.getElementById("dark-mode-mobile");
    const systemModeBtn = document.getElementById("system-mode-mobile");


    if (lightModeBtn && darkModeBtn && systemModeBtn) {
      lightModeBtn.addEventListener("click", () => {
        localStorage.setItem("theme", "light");
        handleThemeChange("light");
      });

      darkModeBtn.addEventListener("click", () => {
        localStorage.setItem("theme", "dark");
        handleThemeChange("dark");
      });

      systemModeBtn.addEventListener("click", () => {
        localStorage.setItem("theme", "system");
        handleThemeChange("system");
      });
    } else {
      console.error("Botones de cambio de tema no encontrados.");
    }

    headerToggle.addEventListener("click", () => {
      headerMenu.classList.remove("hidden");
      headerToggle.classList.add("hidden");
    });

    closeHeader.addEventListener("click", () => {
      headerToggle.classList.remove("hidden");
      headerMenu.classList.add("hidden");
    });


    const initializeMobileThemeToggle = () => {
      const currentTheme = getThemePreference();
      handleThemeChange(currentTheme);
    };

    initializeMobileThemeToggle();
  };

  initializeMobileMenu();

  document.addEventListener("astro:after-swap", () => {
    initializeMobileMenu();
  });
</script>
